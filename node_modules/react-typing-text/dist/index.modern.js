import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var SimpleTypingText = /*#__PURE__*/function (_Component) {
  _inheritsLoose(SimpleTypingText, _Component);

  function SimpleTypingText(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      data: props.data,
      index: 0,
      displayText: ''
    };
    _this.typing = true;
    _this.getRawLetters = _this.getRawLetters.bind(_assertThisInitialized(_this));
    _this.type = _this.type.bind(_assertThisInitialized(_this));
    _this.beginTyping = _this.beginTyping.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = SimpleTypingText.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.beginTyping();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.typing === false) {
      this.startTyping();
      this.typing = true;

      if (this.state.displayText.length < this.props.text.length && this.props.text.length > 0 && this.props.text.substr(0, this.state.displayText.length) === this.state.displayText) ; else {
        this.setState({
          displayText: ''
        });
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this._timeout && clearTimeout(this._timeout);
  };

  _proto.beginTyping = function beginTyping() {
    var _this2 = this;

    this.typing = true;
    this._timeout = setTimeout(function () {
      _this2.type();
    }, this.props.typingDelay);
  };

  _proto.getRawLetters = function getRawLetters() {
    var text = this.props.text;
    return typeof text === 'string' ? [text] : [].concat(text);
  };

  _proto.type = function type() {
    var _this3 = this;

    var _this$state = this.state,
        index = _this$state.index,
        displayText = _this$state.displayText;
    var text = this.getRawText()[index];

    if (text !== displayText) {
      this.typing = true;
      displayText = text.substr(0, displayText.length + 1);
      this.setState({
        displayText: displayText
      }, function () {
        _this3._timeout = setTimeout(function () {
          _this3.type();
        }, _this3.props.speed);
      });
    } else {
      this.typing = false;
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        staticText = _this$props.staticText,
        className = _this$props.className,
        otherProps = _objectWithoutPropertiesLoose(_this$props, ["speed", "typingDelay", "staticText", "text", "className"]);

    var displayText = this.state.displayText;
    var classes = cx(className, 'ps_typing');
    return /*#__PURE__*/React.createElement("span", _extends({}, otherProps, {
      className: classes
    }), staticText ? /*#__PURE__*/React.createElement("span", {
      className: "ps_typing_static_text"
    }, staticText, "\xA0") : null, /*#__PURE__*/React.createElement("span", {
      className: "ps_typing_text"
    }, displayText));
  };

  return SimpleTypingText;
}(Component);
SimpleTypingText.defaultProps = {
  speed: 100,
  typingDelay: 500
};
SimpleTypingText.propTypes = {
  speed: PropTypes.number.isRequired,
  typingDelay: PropTypes.number.isRequired,
  staticText: PropTypes.string,
  text: PropTypes.oneOfType([PropTypes.array, PropTypes.string]).isRequired,
  className: PropTypes.string
};

export default SimpleTypingText;
//# sourceMappingURL=index.modern.js.map
